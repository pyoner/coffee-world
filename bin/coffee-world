#!/usr/bin/env coffee

# requires
cp = require 'child_process'
coffeeCss = require 'coffee-css'
coffeekup = require 'coffeekup'
fs = require 'fs'
util = require 'util'

# globals
findMappings =
    'find . -iname "*.coffee" ! -iname "*.css.coffee" ! -iname "*.html.coffee"': (file) ->
        cp.exec "coffee -c \"#{file}\"", (err, stdout, stderr) ->
            if err
                util.log 'Error compiling ' + file + ': ' + err
            else
                newFile = file.replace /\.coffee$/i, '.js'
                util.log 'Written ' + newFile
    
    'find . -iname "*.css.coffee"': (file) ->
        coffeeCss.compileFile
            afterWriteFile: (fileName, newFileName) ->
                util.log 'Written ' + newFileName
            errorWriteFile: (err, fileName, newFileName) ->
                util.log 'Error compiling ' + fileName + ': ' + err.message
            fileName: file

    'find . -iname "*.html.coffee"': (file) ->
        fs.readFile file, (err, data) ->
            newFile = file.replace /\.html.coffee$/i, '.html'
            try
                fs.writeFile newFile, coffeekup.render(data.toString()), (err) ->
                    util.log 'Written ' + newFile
            catch err
                util.log 'Error compiling ' + file + ': ' + err.message

    'find . -iname "*.js" ! -iname "*.min.js"': (file) ->
        cp.exec "uglifyjs -nc \"#{file}\"", (err, stdout, stderr) ->
            if err
                util.log 'Error compiling ' + file + ': ' + err
            else
                newFile = file.replace /\.js$/i, '.min.js'
                fs.writeFile newFile, stdout, (err) ->
                    util.log 'Written ' + newFile

startWithAll = false

watchedFiles = {}

# functions
poller = () ->
    findFiles findCommand, compileFunction for findCommand, compileFunction of findMappings

findFiles = (findCommand, compileFunction) ->
    cp.exec findCommand, (error, stdout, stderr) ->
        fileList = stdout.split('\n')
        compileIfNeeded file, compileFunction for file in fileList when file != ''

compileIfNeeded = (file, compileFunction) ->
    fs.stat file, (err, stats) ->
        oldModifiedTime = watchedFiles[file]
        newModifiedTime = new Date(stats.mtime)
        oldModifiedTime = newModifiedTime - 1 if oldModifiedTime == undefined && startWithAll
        watchedFiles[file] = newModifiedTime
        compileFunction file if newModifiedTime > oldModifiedTime

# main
util.log 'Watching ' + process.cwd()
startWithAll = true if process.argv[2]?.toLowerCase() == 'all'
setInterval poller, 1000